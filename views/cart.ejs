<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PetVerse - Shopping Cart</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="/css/products.css">
    <style>
        .cart-container {
            max-width: 1200px;
            margin: 40px auto;
            padding: 0 20px;
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 30px;
        }

        .cart-items {
            background: #fff;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .cart-item {
            display: grid;
            grid-template-columns: auto 1fr auto;
            gap: 20px;
            padding: 20px;
            border-bottom: 1px solid #eee;
            align-items: center;
            background: #fff;
            border-radius: 8px;
            margin-bottom: 15px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }

        .cart-item:last-child {
            border-bottom: none;
        }

        .item-image {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 8px;
        }

        .item-details {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .item-name {
            font-size: 1.1rem;
            font-weight: 600;
            color: #333;
        }

        .item-meta {
            color: #666;
            font-size: 0.9rem;
        }

        .quantity-controls {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 10px;
        }

        .quantity-btn {
            width: 30px;
            height: 30px;
            border: 1px solid #ddd;
            background: #fff;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            color: #333;
            transition: all 0.2s;
        }

        .quantity-btn:hover {
            background: #f5f5f5;
        }

        .quantity-input {
            width: 50px;
            text-align: center;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 5px;
        }

        .item-actions {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 10px;
        }

        .item-price {
            font-weight: 600;
            color: #333;
            font-size: 1.2rem;
        }

        .remove-btn {
            color: #ff4444;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: color 0.2s ease;
        }

        .remove-btn:hover {
            color: #ff0000;
        }

        .order-summary {
            background: #fff;
            border-radius: 10px;
            padding: 24px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            height: fit-content;
        }

        .summary-title {
            font-size: 24px;
            color: #333;
            margin-bottom: 24px;
            font-weight: 600;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 16px;
            color: #666;
            font-size: 16px;
        }

        .summary-total {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            font-weight: 600;
            color: #333;
            font-size: 18px;
        }

        .checkout-btn {
            width: 100%;
            padding: 15px;
            background: #6c5ce7;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            margin-top: 20px;
            transition: background 0.2s;
        }

        .checkout-btn:hover {
            background: #5b4bc4;
        }

        .delivery-info {
            display: flex;
            align-items: center;
            gap: 8px;
            color: #00a152;
            margin-top: 10px;
            font-size: 0.9rem;
        }

        .empty-cart {
            background: #fff;
            border-radius: 10px;
            padding: 40px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            min-height: 400px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .empty-cart-content {
            max-width: 400px;
            margin: 0 auto;
        }

        .empty-cart i {
            font-size: 48px;
            color: #333;
            margin-bottom: 20px;
        }

        .empty-cart h2 {
            font-size: 24px;
            color: #333;
            margin-bottom: 10px;
            font-weight: 600;
        }

        .empty-cart p {
            color: #666;
            margin-bottom: 30px;
            font-size: 16px;
        }

        .continue-shopping-btn {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background: #6c5ce7;
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            text-decoration: none;
            font-weight: 500;
            transition: background 0.2s;
        }

        .continue-shopping-btn:hover {
            background: #5b4bc4;
            text-decoration: none;
            color: white;
        }

        .continue-shopping-btn i {
            font-size: 16px;
            margin: 0;
            color: white;
        }

        .checkout-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

        .checkout-btn:disabled:hover {
            background: #ccc;
        }

        @media (max-width: 768px) {
            .cart-container {
                grid-template-columns: 1fr;
            }
        }

        .stock-status {
            margin-left: 10px;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .stock-status.in-stock {
            background-color: #e8f5e9;
            color: #2e7d32;
        }

        .stock-status.low-stock {
            background-color: #fff3e0;
            color: #e65100;
        }

        .stock-status.out-of-stock {
            background-color: #ffebee;
            color: #c62828;
        }
    </style>
</head>

<body>
    <%- include('partials/header') %>

    <div class="cart-container">
        <% if (cart && cart.items && cart.items.length > 0) { %>
            <div class="cart-items">
                <% cart.items.forEach(item => { %>
                    <div class="cart-item" data-product-id="<%= item.productId._id %>">
                        <a href="/buy/<%= item.productId._id %>" class="cart-item-link" style="display: flex; align-items: center; text-decoration: none; color: inherit;">
                            <img src="<%= item.productId.images && item.productId.images.length > 0 ? `data:${item.productId.images[0].contentType};base64,${item.productId.images[0].data.toString('base64')}` : '/images/default-product.jpg' %>" 
                                 alt="<%= item.productId.name %>" 
                                 class="item-image">
                            <div class="item-details">
                                <h3 class="item-name"><%= item.productId.name %></h3>
                                <p class="item-meta">
                                    Brand: <%= item.productId.brand %>
                                    <span class="stock-status <%= item.productId.stock === 0 ? 'out-of-stock' : (item.productId.stock <= 5 ? 'low-stock' : 'in-stock') %>">
                                        <% if (item.productId.stock === 0) { %>
                                            Out of Stock
                                        <% } else if (item.productId.stock <= 5) { %>
                                            Only <%= item.productId.stock %> left
                                        <% } else { %>
                                            In Stock
                                        <% } %>
                                    </span>
                                </p>
                                <div class="product-price">
                                    <% if (item.productId.discount > 0) { %>
                                        <span class="original-price">₹<%= item.productId.price.toFixed(2) %></span>
                                        <span class="discounted-price">₹<%= (item.productId.price * (1 - item.productId.discount/100)).toFixed(2) %></span>
                                        <span class="discount-badge"><%= item.productId.discount %>% OFF</span>
                                    <% } else { %>
                                        <span class="discounted-price">₹<%= item.productId.price.toFixed(2) %></span>
                                    <% } %>
                                </div>
                            </div>
                        </a>
                        <div class="item-actions">
                            <div class="quantity-controls">
                                <button class="quantity-btn decrease" data-product-id="<%= item.productId._id %>">-</button>
                                <input type="number" class="quantity-input" value="<%= item.quantity %>" min="1" max="<%= item.productId.stock %>" data-product-id="<%= item.productId._id %>">
                                <button class="quantity-btn increase" data-product-id="<%= item.productId._id %>">+</button>
                            </div>
                            <button class="remove-btn" data-product-id="<%= item.productId._id %>">
                                <i class="fas fa-trash"></i> Remove
                            </button>
                        </div>
                    </div>
                <% }); %>
            </div>

            <div class="order-summary">
                <h2 class="summary-title">Order Summary</h2>
                <div class="summary-row">
                    <span>Subtotal</span>
                    <span id="subtotal">₹<%= cart.items.reduce((sum, item) => {
                        const price = item.productId.discount > 0 
                            ? item.productId.price * (1 - item.productId.discount/100) 
                            : item.productId.price;
                        return sum + (price * item.quantity);
                    }, 0).toFixed(2) %></span>
                </div>
                <div class="summary-row">
                    <span>Shipping</span>
                    <span>Free</span>
                </div>
                <div class="summary-total">
                    <span>Total</span>
                    <span id="total">₹<%= cart.items.reduce((sum, item) => {
                        const price = item.productId.discount > 0 
                            ? item.productId.price * (1 - item.productId.discount/100) 
                            : item.productId.price;
                        return sum + (price * item.quantity);
                    }, 0).toFixed(2) %></span>
                </div>
                <div class="delivery-info">
                    <i class="fas fa-truck"></i>
                    <span>Free delivery on orders above ₹500</span>
                </div>
                <button class="checkout-btn">Proceed to Checkout</button>
            </div>
        <% } else { %>
            <div class="empty-cart">
                <div class="empty-cart-content">
                    <i class="fas fa-shopping-cart"></i>
                    <h2>Your cart is empty</h2>
                    <p>Looks like you haven't added any items to your cart yet.</p>
                    <a href="/products" class="continue-shopping-btn">
                        <i class="fas fa-arrow-left"></i>
                        Continue Shopping
                    </a>
                </div>
            </div>
        <% } %>
    </div>

    <%- include('partials/footer') %>

    <script src="/js/cart-manager.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize cart count
            cartManager.initializeCart();

            // Function to update cart totals
            function updateCartTotals() {
                let subtotal = 0;
                document.querySelectorAll('.cart-item').forEach(item => {
                    const quantity = parseInt(item.querySelector('.quantity-input').value);
                    const priceElement = item.querySelector('.discounted-price');
                    const price = parseFloat(priceElement.textContent.replace('₹', ''));
                    subtotal += price * quantity;
                });

                document.getElementById('subtotal').textContent = `₹${subtotal.toFixed(2)}`;
                document.getElementById('total').textContent = `₹${subtotal.toFixed(2)}`;
            }

            // Function to handle quantity updates
            async function updateQuantity(productId, newQuantity) {
                try {
                    const response = await fetch('/cart/update', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ productId, quantity: newQuantity })
                    });

                    const data = await response.json();
                    if (data.success) {
                        updateCartTotals();
                        return true;
                    } else {
                        throw new Error(data.message || 'Failed to update quantity');
                    }
                } catch (error) {
                    console.error('Error updating quantity:', error);
                    return false;
                }
            }

            // Quantity controls
            document.querySelectorAll('.quantity-btn').forEach(btn => {
                btn.addEventListener('click', async (e) => {
                    const productId = e.target.getAttribute('data-product-id');
                    const input = document.querySelector(`.quantity-input[data-product-id="${productId}"]`);
                    let quantity = parseInt(input.value);
                    
                    if (e.target.classList.contains('decrease')) {
                        if (quantity > 1) {
                            quantity--;
                            if (await updateQuantity(productId, quantity)) {
                                input.value = quantity;
                            }
                        }
                    } else if (e.target.classList.contains('increase')) {
                        const max = parseInt(input.getAttribute('max'));
                        if (quantity < max) {
                            quantity++;
                            if (await updateQuantity(productId, quantity)) {
                                input.value = quantity;
                            }
                        }
                    }
                });
            });

            // Handle direct input changes
            document.querySelectorAll('.quantity-input').forEach(input => {
                input.addEventListener('change', async (e) => {
                    const productId = e.target.getAttribute('data-product-id');
                    let quantity = parseInt(e.target.value);
                    const max = parseInt(e.target.getAttribute('max'));
                    
                    if (quantity < 1) quantity = 1;
                    if (quantity > max) quantity = max;
                    
                    if (await updateQuantity(productId, quantity)) {
                        e.target.value = quantity;
                    } else {
                        // Reset to previous value if update failed
                        e.target.value = e.target.defaultValue;
                    }
                });
            });

            // Remove item
            document.querySelectorAll('.remove-btn').forEach(btn => {
                btn.addEventListener('click', async (e) => {
                    const productId = e.target.getAttribute('data-product-id');
                    const cartItem = e.target.closest('.cart-item');
                    
                    try {
                        const response = await fetch('/cart/remove', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ productId })
                        });

                        const data = await response.json();
                        if (data.success) {
                            cartItem.remove();
                            updateCartTotals();
                            
                            // Update cart count
                            const cartCount = document.getElementById('cart-count');
                            if (cartCount) {
                                const currentCount = parseInt(cartCount.textContent);
                                cartCount.textContent = currentCount - 1;
                                if (currentCount - 1 === 0) {
                                    cartCount.style.display = 'none';
                                }
                            }

                            // Check if cart is empty
                            if (document.querySelectorAll('.cart-item').length === 0) {
                                window.location.reload(); // Reload to show empty cart message
                            }
                        } else {
                            throw new Error(data.message || 'Failed to remove item');
                        }
                    } catch (error) {
                        console.error('Error removing item:', error);
                        alert('Failed to remove item. Please try again.');
                    }
                });
            });

            // Checkout button
            document.querySelector('.checkout-btn')?.addEventListener('click', () => {
                window.location.href = '/checkout';
            });
        });
    </script>
</body>

</html>